# -*- coding: utf-8 -*-
"""Auto_Sklearn_Project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13jawyn9yDEUA_0WsvSK-jAf6XxWMs4J1

Setup Auto-Sklearn
"""

!curl https://raw.githubusercontent.com/automl/auto-sklearn/master/requirements.txt | xargs -n 1 -L 1 pip3 install

!pip install --upgrade scipy

!pip3 install auto-sklearn

# print autosklearn version
import autosklearn
print('auto-sklearn: %s' % autosklearn.__version__)

from pandas import read_csv
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score
from autosklearn.classification import AutoSklearnClassifier

import pandas as pd

# import autosklearn.classification

# import autosklearn.regression

"""Load Dataset"""

from google.colab import files
uploaded = files.upload()

data = 'Pitch TRAINING Data V3 - Final.csv'

df = pd.read_csv(data)

"""Check Dataset"""

df.dtypes

# check for missing values

df.isnull().sum()

#assert that there are no missing values in the dataframe

# assert pd.notnull(df).all().all()

categorical = [var for var in df.columns if df[var].dtype=='O']

print('There are {} categorical variables\n'.format(len(categorical)))

print('The categorical variables are :\n\n', categorical)

numerical = [var for var in df.columns if df[var].dtype!='O']

print('There are {} numerical variables\n'.format(len(numerical)))

print('The numerical variables are :\n\n', numerical)

"""Data Prep"""

# Dropping 'player_number' as we have created the dummies for it
df.drop(['player_number'], axis = 1, inplace = True)

df

# Creating dummy variable
zones = pd.get_dummies(df['zone'])

#Display zones
zones

# One-hot encode the data using pandas get_dummies
df = pd.get_dummies(df)

# Adding the status to the original housing dataframe
#df = pd.concat([df, zones], axis = 1)

# Dropping 'zone' as we have created the dummies for it
df.drop(['zone'], axis = 1, inplace = True)

# Display the first 5 rows
#df.iloc[:,5:].head(5)
df

"""Model Construction"""

X = df.drop(['event_home_run'], axis=1)

y = df['event_home_run']

from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size = 0.3, random_state = 0)

# define search
# model = AutoSklearnClassifier(time_left_for_this_task=5*60, per_run_time_limit=30)
model = AutoSklearnClassifier(time_left_for_this_task=8*60, per_run_time_limit=60)
# perform the search
model.fit(X_train, y_train)

# summarize
print(model.sprint_statistics())
# evaluate best model
y_hat = model.predict(X_test)
acc = accuracy_score(y_test, y_hat)
print("Accuracy: %.3f" % acc)

!jupyter nbconvert --to script Auto_Sklearn_Project.ipynb